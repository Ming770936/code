#include<cctype>
//isalpha(int c): 判断一个字符是否为字母（包括大写和小写字母）。
//isdigit(int c): 判断一个字符是否为数字。
//isalnum(int c): 判断一个字符是否为字母或数字。
//isupper(int c): 判断一个字符是否为大写字母。
//islower(int c): 判断一个字符是否为小写字母。
//isspace(int c): 判断一个字符是否为空白字符（空格、换行、制表符等）。
//toupper(int c): 将一个字符转换为大写形式。
//tolower(int c): 将一个字符转换为小写形式。

//将字符串倒序
#include <iostream>
#include <string>
using namespace std;

int main()
{
    string originalString = "Hello, World!";
    string reversedString = string(originalString.rbegin(), originalString.rend());
    cout << reversedString << endl;
    return 0;
}




//取子序列
#include <iostream>
#include <string>

int main() {
    string originalString = "Hello, World!";
    int n = 5;
    string result = originalString.substr(0, n); // 使用substr方法
    cout << result << endl; // 输出结果为 "Hello"
    return 0;
}




memset(chars, 0, sizeof(chars)) 是一个C/C++编程中的常见操作，用于将一段内存区域中的数据设置为指定的值。这里是每个参数的含义：

chars：指向要操作的内存区域的指针或数组。
0：要设置的值，通常是一个整数。在这种情况下，它是0。
sizeof(chars)：要操作的内存区域的大小（以字节为单位），可以使用 sizeof 运算符来获取。
因此，memset(chars, 0, sizeof(chars)) 的意思是将 chars 所指向的内存区域的所有字节都设置为0。这通常用于初始化或清零数组、缓冲区或其他内存块，以确保其内容为空或具有特定初始值。

示例用法：
#include <iostream>
#include <cstring>

int main() {
    char chars[10]; // 创建一个包含10个字符的数组
    memset(chars, 0, sizeof(chars)); // 将数组中的所有字符都设置为0

    // 打印数组中的字符，它们应该都是0
    for (int i = 0; i < 10; i++) {
        std::cout << static_cast<int>(chars[i]) << " "; // 输出0 0 0 0 0 0 0 0 0 0
    }

    return 0;
}



for (char &c : inputString) {
        cout << c << " "; // Output each character
    }




#include <iostream>
#include <string>
using namespace std;

int main() {
    string text = "   This is a text with leading and trailing spaces.   ";

    // 去除开头的空格
    size_t start = text.find_first_not_of(" \t");
    if (start != string::npos) {
        text = text.substr(start);
    }

    // 去除结尾的空格
    size_t end = text.find_last_not_of(" \t");
    if (end != string::npos) {
        text = text.substr(0, end + 1);
    }

    cout << "Trimmed Text: " << text << endl;

    return 0;
}









字符串头尾字符
sentence.back() != sentence.front()

















#include <iostream>
#include <string>

int main() {
    std::string input;
    std::string result = "";

    std::cout << "请输入一个字符串: ";
    std::cin >> input;

    for (char ch : input) {
        // 检查结果字符串中是否已经包含当前字符
        if (result.find(ch) == std::string::npos) {
            // 如果不包含，则将当前字符添加到结果字符串中
            result += ch;
        }
    }

    std::cout << "去除相同字母后的字符串: " << result << std::endl;

    return 0;
}
















//判断子序列
#include <iostream>
using namespace std;

bool isSubsequence(string s, string t) {
    int i = 0, j = 0;

    while (i < s.length() && j < t.length()) {
        if (s[i] == t[j]) {
            j++;
        }
        i++;
    }

    return j == t.length();
}

int main() {
    string s = "abcdefg";
    string t = "aceg";

    if (isSubsequence(s, t)) {
        cout << "t 是 s 的子序列" << endl;
    } else {
        cout << "t 不是 s 的子序列" << endl;
    }

    return 0;
}
