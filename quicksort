#include <iostream>
using namespace std;

void quickSort(int arr[], int low, int high) 
{
    if (low < high)
        {
        int pivot = arr[(low + high) / 2];
        
        // 分割数组，使得小于枢纽元素的元素位于左边，大于枢纽元素的元素位于右边
        int i = low;
        int j = high;
        while (i <= j) {
            while (arr[i] < pivot) {
                i++;
            }
            while (arr[j] > pivot) {
                j--;
            }
            if (i <= j) {
                std::swap(arr[i], arr[j]);
                i++;
                j--;
            }
        }
        
        // 递归排序左边和右边的子数组
        quickSort(arr, low, j);
        quickSort(arr, i, high);
    }
}

int main() {
    int arr[] = {5, 1, 9, 3, 7, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    cout << "原始数组: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    quickSort(arr, 0, n - 1);
    
    cout << "排序后的数组: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    return 0;
}



















#include<iostream>
using namespace std;
int n;
void kp(int l,int r,int a[]) {
    if (l>=r) return;
    int mid=a[(l+r)/2];
    int i=l-1,j=r+1;
    while (i<j){
        do i++;while (a[i]<mid);
        do j--;while(a[j]>mid);
        if (i<j) swap(a[i],a[j]);
    }
    kp(l,j,a);
    kp(j+1,r,a);
   
}
int main() {
    int a[1000010];
    int i;
    cin>>n;
    for (i=0;i<n;i++) cin>>a[i];
    kp(0,n-1,a);
    for (i=0;i<n;i++) cout<<a[i]<<' ';
    return 0;
}
